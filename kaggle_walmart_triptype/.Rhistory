test<- merge(store, test, by="Store")
#Lets explore the sales data for a quick seconds
hist(train$Sales, 100)
#Interesting. Shockingly, it seemst that stores which are not open cannot make sales.
#Since predicting the sales figures of non-open stores seems simple, we should only consider cases
#store are open
train.opensample<- subset(train, Open >0)
hist(train.opensample$Sales, 100)
#Add Year, Month, Week and Day to trainingset
train = as.data.table(train)
train$day = day(as.Date(train$Date,"%y/%m/%d"))
train$week = week(as.Date(train$Date,"%y/%m/%d"))
train$month = month(as.Date(train$Date,"%y/%m/%d"))
train$year = year(as.Date(train$Date,"%y/%m/%d"))
head(train)
library(caret)
library(data.table)
library(forecast)
library(ggplot2)
library(zoo)
require(dplyr)
library(randomForest)
setwd("/Users/bikash/repos/kaggleCompetition1/RossmannStoreSales")
# Set seed
set.seed(123)
## data load
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
str(train) #1017209
str(store) ##1115
str(test) #41088
# check is.na
sum(is.na(subtrain))  # 0
sum(is.na(train))     # 0
sum(is.na(stores))                           # 1799
sum(is.na(stores$CompetitionDistance))        #   3
sum(is.na(stores$CompetitionOpenSinceYear))   # 354
sum(is.na(stores$CompetitionOpenSinceMonth))  # 354
sum(is.na(stores$Promo2SinceYear))            # 544
sum(is.na(stores$Promo2SinceWeek))            # 544
sum(is.na(train))     # 0
sum(is.na(store))                           # 1799
sum(is.na(store$CompetitionDistance))        #   3
sum(is.na(store$CompetitionOpenSinceYear))   # 354
sum(is.na(store$CompetitionOpenSinceMonth))  # 354
sum(is.na(store$Promo2SinceYear))            # 544
sum(is.na(store$Promo2SinceWeek))            # 544
train$Date <- ymd(train$Date)
test$Date <- ymd(test$Date)
train$day <- as.factor(day(train$Date))
test$day <- as.factor(day(test$Date))
train$month <- as.factor(month(train$Date))
test$month <- as.factor(month(test$Date))
train$year <- as.factor(year(train$Date))
test$year <- as.factor(year(test$Date))
head(train)
head(test)
days_open = train[,list(count = sum(Open)), by = list(Store)]
days_open = train[,list(count = sum(train$Open)), by = list(train$Store)]
list(count = sum(train$Open)), by = list(train$Store)
list(count = sum(train$Open), by = list(train$Store))
list(count = sum(train$Open))
days_open = train[,list(count = sum(train$Open), by = list(train$Store))]
list(count = sum(train$Open), by = list(train$Store))
list(count = sum(train$Open))
days_open = train[,(list(count = sum(train$Open)), by = list(train$Store))]
specific_store = train[Store == 85]
head(train)
train$Store == 85
train <- merge(train,store)
test <- merge(test,store)
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
head(train)
head(test)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
panel.lmline()
#The following code does NOT result in a plot appearing on the screen device.
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(123)
## data load
data <- read.table("household_power_consumption.txt",sep=',',header = T)
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", colClasses=c("character", "character", rep("numeric",7)), na="?")
data
setwd("/Users/bikash/repos/Coursera-Practical-Machine-Learning/ExploratorydataScience/project1")
# Set seed
set.seed(123)
## data load
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", colClasses=c("character", "character", rep("numeric",7)), na="?")
head(data)
str(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
head(daya)
head(data)
data_sub <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
str(data_sub)
data$Datetime <- as.POSIXct(paste(as.Date(data_sub$Date), data_sub$Time))
date <- paste(as.Date(data_sub$Date), data_sub$Time)
data$Datetime <- as.POSIXct(date)
date <- paste(as.Date(data_sub$Date), data_sub$Time)
data_sub$Datetime <- as.POSIXct(date)
head(data_sub)
hist(data_sub$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
plot(data_sub$Datetime,data_sub$Global_active_power, main="Global Active Power",lab="Global Active Power (kilowatts)", ylab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, main="Global Active Power",xlab="Global Active Power (kilowatts)", ylab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, main="Global Active Power", ylab="Global Active Power (kilowatts)", xlab="date", type"1")
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="Global Active Power", ylab="Global Active Power (kilowatts)", xlab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
head(data_sub
)
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
line(data_sub$Datetime,data_sub$Sub_metering_1,type="l")
plot(NULL, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
lines(data_sub$Sub_metering_1, type="o", pch=22, lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
lines(data_sub$Sub_metering_2, type="o", pch=22, lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
plot(NULL, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="o",  lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", lty=2, col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
##plot3
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
head(data)
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot4 <- paste(getwd(), "/plots/plot4.png", sep = "")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
plot4 <- paste(getwd(), "/plots/plot4.png", sep = "")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
##plot 1
png("plots/plot1.png", width = 480, height = 480)
hist(data_sub$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
##plot2
png("plots/plot2.png", width = 480, height = 480)
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
dev.off()
##plot3
png("plots/plot3.png", width = 480, height = 480)
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
## plot4
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
require(xgboost)
require(Matrix)
library(doMC)
registerDoMC(cores = 4)
library(sqldf)
library(reshape2)
library(data.table)
library(plyr)
library(rpart)
setwd("/Users/bikash/repos/kaggleCompetition1/kaggle_walmart_triptype")
# Set seed
set.seed(1765)
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
# Create unique trip types for result
outcomes <- data.frame(TripType = sort(unique(train$TripType)))
outcomes$Index <- seq_along(outcomes$TripType) - 1
# Convert NA values
# NA values are found in FinelineNumber and Upc. "NULL" string value is found in DepartmentDescription.
train$FinelineNumber <- addNA(train$FinelineNumber)
train$Upc <- addNA(train$Upc)
#train <- train[, ifelse (train$DepartmentDescription == "NULL", 1, 0)]
# Unique Dept Name
Dept <- sqldf('select distinct DepartmentDescription from train')
Dept$Dept_No <- (1: dim(Dept)[1])
VisitData1 <- sqldf('select distinct visitNumber, TripType, Weekday, sum(scancount) as tot_item, count(scancount) as uniq_item
from train group by visitNumber, TripType, Weekday')
Returnitem <- sqldf('select distinct visitNumber, TripType, Weekday, sum(scancount) as ret_item
from train where scancount<0 group by visitNumber, TripType, Weekday')
VisitDept <- sqldf('select visitNumber, DepartmentDescription, sum(scancount) as tot_item
from train group by visitNumber, DepartmentDescription')
VisitDept <- sqldf('select a.VisitNumber, a.tot_item, b.Dept_No from VisitDept a left join Dept b on a.DepartmentDescription = b.DepartmentDescription')
VisitData2 <- data.frame(acast(VisitDept,VisitNumber ~ Dept_No, fill = 0))
setDT(VisitData2, keep.rownames = TRUE)
rename(VisitData2, c("rn" = "VisitNumber"))
VisitDataF <- sqldf('select a.TripType, a.Weekday, a.tot_item, a.uniq_item, c.ret_item
, b.* from VisitData1 a join VisitData2 b on a.VisitNumber = b.VisitNumber
join Returnitem c on a.VisitNumber = c.VisitNumber  ')
VisitDataF$Weekday <- as.integer(VisitDataF$Weekday)
# VisitDataF$tot_item <- log1p(VisitDataF$tot_item)
# VisitDataF$ret_item <- log1p(VisitDataF$ret_item)
# VisitDataF$uniq_item <- log1p(VisitDataF$uniq_item)
head(VisitDataF)
length(test$VisitNumber) #653646
test$TripType <- c(1:length(test$VisitNumber))
test$ReturnCount <- -test$ScanCount
test$ReturnCount[test$ReturnCount < 0] <- 0
tVisitData1 <- sqldf('select distinct visitNumber, Weekday, sum(scancount) as tot_item, sum(ReturnCount) as ret_item,
count(scancount) as uniq_item
from test group by visitNumber, Weekday')
tVisitDept <- sqldf('select visitNumber, DepartmentDescription, sum(scancount) as tot_item
from test group by visitNumber, TripType, Weekday')
tVisitDept <- sqldf('select a.VisitNumber, a.tot_item, b.Dept_No from tVisitDept a
left join Dept b on a.DepartmentDescription = b.DepartmentDescription')
tVisitData2 <- data.frame(acast(tVisitDept, VisitNumber ~ Dept_No, fill = 0))
setDT(tVisitData2, keep.rownames = TRUE)
rename(tVisitData2, c("rn" = "VisitNumber"))
tVisitDataF <- sqldf('select  a.Weekday, a.tot_item, a.uniq_item
, b.* from tVisitData1 a join tVisitData2 b on a.VisitNumber = b.VisitNumber')
tVisitDataF$Weekday <- as.integer(tVisitDataF$Weekday)
# VisitDataF$tot_item <- log1p(VisitDataF$tot_item)
# VisitDataF$ret_item <- log1p(VisitDataF$ret_item)
# VisitDataF$uniq_item <- log1p(VisitDataF$uniq_item)
# Decision Tree
VisitDataF$TripTypeF <- factor(VisitDataF$TripType)
xnam <- paste0("X", 1:69)
##
### map trip type to unique number.
library(plyr)
label <- plyr::mapvalues(VisitDataF$TripType, from = outcomes$TripType, to = outcomes$Index)
VisitDataF$TripTypeF <- NULL
VisitDataF$TripType <- NULL
###
train.matrix <- as.matrix(VisitDataF)
train.matrix <- as(train.matrix, "dgCMatrix") # conversion to sparse matrix
dtrain <- xgb.DMatrix(train.matrix, label = label)
#test <- read.table("data/test_final.csv",sep=',',header = T)
test.matrix <- as.matrix(tVisitDataF)
test.matrix <- as(test.matrix, "dgCMatrix") # conversion to sparse matrix
dtest <- xgb.DMatrix(test.matrix)
# xgboost parameters
param <- list("objective" = "multi:softprob",    # multiclass classification
"num_class" = 38,    # number of classes
"eval_metric" = "mlogloss",    # evaluation metric
"nthread" = 10,   # number of threads to be used
"silent" =1,
"max_depth" = 9,    # maximum depth of tree
"chi2_lim" = 0,
"eta" = 0.03,    # step size shrinkage
"gamma" = 0,    # minimum loss reduction
"subsample" = 0.5,    # part of data instances to grow tree
"colsample_bytree" = 1,  # subsample ratio of columns when constructing each tree
"min_child_weight" = 12  # minimum sum of instance weight needed in a child
)
nround = 400
bst <- xgb.train( param=param, data=dtrain, label=label, nrounds=nround,  verbose  = 1)
bst
head(tVisitDataF)
tVisitDataF <- sqldf('select  a.Weekday, a.tot_item, a.uniq_item, a.ret_item
, b.* from tVisitData1 a join tVisitData2 b on a.VisitNumber = b.VisitNumber')
head(tVisitDataF)
tVisitDataF$Weekday <- as.integer(tVisitDataF$Weekday)
#test <- read.table("data/test_final.csv",sep=',',header = T)
test.matrix <- as.matrix(tVisitDataF)
test.matrix <- as(test.matrix, "dgCMatrix") # conversion to sparse matrix
dtest <- xgb.DMatrix(test.matrix)
ptest  <- predict(bst, dtest)
head(ptest)
# Decode prediction
ptest <- matrix(ptest, nrow=38, ncol=length(ptest) / 38)
pred <- t(ptest)
pred
# output
print("Storing Output")
submit <- function(filename) {
#pred = format(pred, digits=2,scientific=F) # shrink the size of submission
pred1 <- data.frame(cbind(tVisitDataF$VisitNumber, pred))
names(pred1) <- c("VisitNumber", paste("TripType", outcomes$TripType, sep = "_"))
write.table(format(pred1, scientific = FALSE), paste("output/", filename, sep = ""), row.names = FALSE, sep = ",")
}
submit("xgboost2.csv")
pred = format(pred, digits=2,scientific=F) # shrink the size of submission
pred1 <- data.frame(cbind(tVisitDataF$VisitNumber, pred))
head(pred1)
names(pred1) <- c("VisitNumber", paste("TripType", outcomes$TripType, sep = "_"))
write.table(format(pred1, scientific = FALSE), paste("output/", filename, sep = ""), row.names = FALSE, sep = ",")
write.table(format(pred1, scientific = FALSE), paste("output/", "xgboost2.csv", sep = ""), row.names = FALSE, sep = ",")
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
# Create unique trip types for result
outcomes <- data.frame(TripType = sort(unique(train$TripType)))
outcomes$Index <- seq_along(outcomes$TripType) - 1
# Convert NA values
# NA values are found in FinelineNumber and Upc. "NULL" string value is found in DepartmentDescription.
train$FinelineNumber <- addNA(train$FinelineNumber)
train$Upc <- addNA(train$Upc)
train <- read.table("data/train_final.csv",sep=',',header = T)
test <- read.table("data/test_final.csv",sep=',',header = T)
head(test)
names <- dimnames(dtrain)[[2]]
importance_matrix <- xgb.importance(names, model = bst)
xgb.plot.importance(importance_matrix[1:10,])
xgb.plot.importance(importance_matrix[1:20,])
head(length(train$VisitNumber))
head(length(test$VisitNumber))
head(length(VisitDataF$VisitNumber))
xgb.plot.importance(importance_matrix[1:40,])
train <- read.table("data/train_final.csv",sep=',',header = T)
test <- read.table("data/test_final.csv",sep=',',header = T)
head(length(test$VisitNumber))
head(length(train$VisitNumber))
head(length(unique(VisitDataF$VisitNumber)))
head(length(train$VisitNumber))
train$VisitNumber
train <- read.table("data/train.csv",sep=',',header = T)
head(length(train$VisitNumber))
head(length(unique(VisitDataF$VisitNumber)))
head(length(unique(train$VisitNumber)))
Dept <- sqldf('select distinct DepartmentDescription from train')
Dept$Dept_No <- (1: dim(Dept)[1])
train$ReturnCount <- -train$ScanCount
train$ReturnCount[train$ReturnCount < 0] <- 0
VisitData1 <- sqldf('select distinct visitNumber, TripType, Weekday, sum(scancount) as tot_item,
sum(ReturnCount) as ret_item, count(scancount) as uniq_item
from train group by visitNumber, Weekday')
VisitDept <- sqldf('select visitNumber, DepartmentDescription, sum(scancount) as tot_item
from train group by visitNumber, DepartmentDescription')
VisitDept <- sqldf('select a.VisitNumber, a.tot_item, b.Dept_No from VisitDept a left join Dept b on a.DepartmentDescription = b.DepartmentDescription')
VisitData2 <- data.frame(acast(VisitDept,VisitNumber ~ Dept_No, fill = 0))
setDT(VisitData2, keep.rownames = TRUE)
rename(VisitData2, c("rn" = "VisitNumber"))
head(length(unique(VisitData2$VisitNumber)))
VisitDataF <- sqldf('select a.TripType, a.Weekday, a.tot_item, a.uniq_item, c.ret_item
, b.* from VisitData1 a join VisitData2 b on a.VisitNumber = b.VisitNumber
join Returnitem c on a.VisitNumber = c.VisitNumber  ')
VisitDataF$Weekday <- as.integer(VisitDataF$Weekday)
VisitDataF <- sqldf('select a.TripType, a.Weekday, a.tot_item, a.uniq_item, a.ret_item,
, b.* from VisitData1 a join VisitData2 b on a.VisitNumber = b.VisitNumber ')
VisitDataF$Weekday <- as.integer(VisitDataF$Weekday)
VisitDataF <- sqldf('select a.TripType, a.Weekday, a.tot_item, a.uniq_item, a.ret_item
, b.* from VisitData1 a join VisitData2 b on a.VisitNumber = b.VisitNumber ')
VisitDataF$Weekday <- as.integer(VisitDataF$Weekday)
head(length(unique(VisitData2$VisitNumber)))
head(length(unique(VisitDataF$VisitNumber)))
head(length((VisitDataF$VisitNumber)))
head(VisitDataF)
head(tVisitDataF)
head(test)
head(tVisitDataF)
train <- read.table("data/train_final.csv",sep=',',header = T)
head(tVisitDataF)
train$uniq_item <- VisitDataF$uniq_item
train$tot_item <- VisitDataF$tot_item
test$uniq_item <- tVisitDataF$uniq_item
test$tot_item <- tVisitDataF$tot_item
###
train.matrix <- as.matrix(train)
train.matrix <- as(train.matrix, "dgCMatrix") # conversion to sparse matrix
dtrain <- xgb.DMatrix(train.matrix, label = label)
#test <- read.table("data/test_final.csv",sep=',',header = T)
test.matrix <- as.matrix(test)
test.matrix <- as(test.matrix, "dgCMatrix") # conversion to sparse matrix
dtest <- xgb.DMatrix(test.matrix)
length(label)
label <- plyr::mapvalues(VisitDataF$TripType, from = outcomes$TripType, to = outcomes$Index)
length(label)
train.matrix <- as.matrix(train)
train.matrix <- as(train.matrix, "dgCMatrix") # conversion to sparse matrix
dtrain <- xgb.DMatrix(train.matrix, label = label)
cat("Training model - Xgboost\n")
# xgboost parameters
param <- list("objective" = "multi:softprob",    # multiclass classification
"num_class" = 38,    # number of classes
"eval_metric" = "mlogloss",    # evaluation metric
"nthread" = 10,   # number of threads to be used
"silent" =1,
"max_depth" = 9,    # maximum depth of tree
"chi2_lim" = 0,
"eta" = 0.03,    # step size shrinkage
"gamma" = 0,    # minimum loss reduction
"subsample" = 0.5,    # part of data instances to grow tree
"colsample_bytree" = 1,  # subsample ratio of columns when constructing each tree
"min_child_weight" = 12  # minimum sum of instance weight needed in a child
)
nround = 400
bst <- xgb.train( param=param, data=dtrain, label=label, nrounds=nround,  verbose = 1)
# Note: we need the margin value instead of transformed prediction in set_base_margin
# do predict with output_margin=TRUE, will always give you margin values before logistic transformation
#save(bst,file="xgboost.Rda")
#load("xgboost.Rda")
# Get the feature real names
#names <- dimnames(dtrain)[[2]]
# Compute feature importance matrix
#importance_matrix <- xgb.importance(names, model = bst)
# Nice graph
#xgb.plot.importance(importance_matrix[1:40,])
ptest  <- predict(bst, dtest)
head(ptest)
# Decode prediction
ptest <- matrix(ptest, nrow=38, ncol=length(ptest) / 38)
pred <- t(ptest)
# output
print("Storing Output")
submit <- function(filename) {
#pred = format(pred, digits=2,scientific=F) # shrink the size of submission
pred1 <- data.frame(cbind(tVisitDataF$VisitNumber, pred))
names(pred1) <- c("VisitNumber", paste("TripType", outcomes$TripType, sep = "_"))
write.table(format(pred1, scientific = FALSE), paste("output/", filename, sep = ""), row.names = FALSE, sep = ",")
}
submit("xgboost2.csv")
names <- dimnames(dtrain)[[2]]
importance_matrix <- xgb.importance(names, model = bst)
xgb.plot.importance(importance_matrix[1:30,])
names
dimnames(dtrain)[[2]]
dtrain
dimnames(train)[[2]]
names <- dimnames(train)[[2]]
importance_matrix <- xgb.importance(names, model = bst)
