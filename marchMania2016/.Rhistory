str(train)
str(test)
str(store)
train[, Date := as.Date(Date)]
test[, Date := as.Date(Date)]
store
train[, Date := as.Date(Date)]
test[, Date := as.Date(Date)]
help(":=")
library(dplyr)
library(data.table)
myfun <- function() {
DT <- data.table(a = 1:4, b = 5:8)
DT[, x := a + 2]
DT
}
myfun()
test[, Date := as.Date(Date)]
as.Date
as.Date(train$Date)
train$Date <- as.Date(train$Date)
test$Date <- as.Date(test$Date)
head(order(train))
train <- train[order(Date)]
summary(train)
summary(test)
test[is.na(test$Open), ] # Only store 622
test$Open[test$Store == 622]
test[is.na(test)] <- 1
train[, lapply(.SD, function(x) length(unique(x)))]
train[, lapply(.SD, function(x) length(unique(x)))]
library(data.table)
library(forecast)
library(ggplot2)
library(zoo)
require(dplyr)
setwd("/Users/bikash/repos/kaggleCompetition1/RossmannStoreSales")
# Set seed
set.seed(123)
## data load
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
str(train) #1017209
str(store) ##1115
str(test) #41088
train<- merge(store, train, by="Store")
test<- merge(store, test, by="Store")
hist(train$Sales, 100)
train.opensample<- subset(train, Open >0)
hist(train.opensample$Sales, 100)
library(randomForest)
library(caret)
rf1 <- randomForest( Sales~Customers+Promo+StateHoliday+SchoolHoliday, data = train.opensample, ntree= 100, importance= TRUE)
imp <- varImp(rf1)
imp
test <-importance(rf1, type=2)
featureImportance <- data.frame(Feature=row.names(test), Importance=test[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +geom_bar(stat="identity", fill="#53cfff") +coord_flip() + theme_light(base_size=20) + ylab("Importance") + ggtitle("Random Forest Feature Importance\n") +theme(plot.title=element_text(size=18))
p
train = as.data.table(train)
train$day = day(as.Date(train$Date,"%y/%m/%d"))
train$week = week(as.Date(train$Date,"%y/%m/%d"))
train$month = month(as.Date(train$Date,"%y/%m/%d"))
train$year = year(as.Date(train$Date,"%y/%m/%d"))
head(train)
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
str(train) #1017209
str(store) ##1115
str(test) #41088
summary(train)
summary(test)
train<- merge(store, train, by="Store")
test<- merge(store, test, by="Store")
#Lets explore the sales data for a quick seconds
hist(train$Sales, 100)
#Interesting. Shockingly, it seemst that stores which are not open cannot make sales.
#Since predicting the sales figures of non-open stores seems simple, we should only consider cases
#store are open
train.opensample<- subset(train, Open >0)
hist(train.opensample$Sales, 100)
#Add Year, Month, Week and Day to trainingset
train = as.data.table(train)
train$day = day(as.Date(train$Date,"%y/%m/%d"))
train$week = week(as.Date(train$Date,"%y/%m/%d"))
train$month = month(as.Date(train$Date,"%y/%m/%d"))
train$year = year(as.Date(train$Date,"%y/%m/%d"))
head(train)
library(caret)
library(data.table)
library(forecast)
library(ggplot2)
library(zoo)
require(dplyr)
library(randomForest)
setwd("/Users/bikash/repos/kaggleCompetition1/RossmannStoreSales")
# Set seed
set.seed(123)
## data load
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
str(train) #1017209
str(store) ##1115
str(test) #41088
# check is.na
sum(is.na(subtrain))  # 0
sum(is.na(train))     # 0
sum(is.na(stores))                           # 1799
sum(is.na(stores$CompetitionDistance))        #   3
sum(is.na(stores$CompetitionOpenSinceYear))   # 354
sum(is.na(stores$CompetitionOpenSinceMonth))  # 354
sum(is.na(stores$Promo2SinceYear))            # 544
sum(is.na(stores$Promo2SinceWeek))            # 544
sum(is.na(train))     # 0
sum(is.na(store))                           # 1799
sum(is.na(store$CompetitionDistance))        #   3
sum(is.na(store$CompetitionOpenSinceYear))   # 354
sum(is.na(store$CompetitionOpenSinceMonth))  # 354
sum(is.na(store$Promo2SinceYear))            # 544
sum(is.na(store$Promo2SinceWeek))            # 544
train$Date <- ymd(train$Date)
test$Date <- ymd(test$Date)
train$day <- as.factor(day(train$Date))
test$day <- as.factor(day(test$Date))
train$month <- as.factor(month(train$Date))
test$month <- as.factor(month(test$Date))
train$year <- as.factor(year(train$Date))
test$year <- as.factor(year(test$Date))
head(train)
head(test)
days_open = train[,list(count = sum(Open)), by = list(Store)]
days_open = train[,list(count = sum(train$Open)), by = list(train$Store)]
list(count = sum(train$Open)), by = list(train$Store)
list(count = sum(train$Open), by = list(train$Store))
list(count = sum(train$Open))
days_open = train[,list(count = sum(train$Open), by = list(train$Store))]
list(count = sum(train$Open), by = list(train$Store))
list(count = sum(train$Open))
days_open = train[,(list(count = sum(train$Open)), by = list(train$Store))]
specific_store = train[Store == 85]
head(train)
train$Store == 85
train <- merge(train,store)
test <- merge(test,store)
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
head(train)
head(test)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
panel.lmline()
#The following code does NOT result in a plot appearing on the screen device.
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(123)
## data load
data <- read.table("household_power_consumption.txt",sep=',',header = T)
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", colClasses=c("character", "character", rep("numeric",7)), na="?")
data
setwd("/Users/bikash/repos/Coursera-Practical-Machine-Learning/ExploratorydataScience/project1")
# Set seed
set.seed(123)
## data load
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", colClasses=c("character", "character", rep("numeric",7)), na="?")
head(data)
str(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
head(daya)
head(data)
data_sub <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
str(data_sub)
data$Datetime <- as.POSIXct(paste(as.Date(data_sub$Date), data_sub$Time))
date <- paste(as.Date(data_sub$Date), data_sub$Time)
data$Datetime <- as.POSIXct(date)
date <- paste(as.Date(data_sub$Date), data_sub$Time)
data_sub$Datetime <- as.POSIXct(date)
head(data_sub)
hist(data_sub$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
plot(data_sub$Datetime,data_sub$Global_active_power, main="Global Active Power",lab="Global Active Power (kilowatts)", ylab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, main="Global Active Power",xlab="Global Active Power (kilowatts)", ylab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, main="Global Active Power", ylab="Global Active Power (kilowatts)", xlab="date", type"1")
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="Global Active Power", ylab="Global Active Power (kilowatts)", xlab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
head(data_sub
)
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
line(data_sub$Datetime,data_sub$Sub_metering_1,type="l")
plot(NULL, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
lines(data_sub$Sub_metering_1, type="o", pch=22, lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
lines(data_sub$Sub_metering_2, type="o", pch=22, lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
plot(NULL, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="o",  lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", lty=2, col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
##plot3
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
head(data)
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot4 <- paste(getwd(), "/plots/plot4.png", sep = "")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
plot4 <- paste(getwd(), "/plots/plot4.png", sep = "")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
##plot 1
png("plots/plot1.png", width = 480, height = 480)
hist(data_sub$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
##plot2
png("plots/plot2.png", width = 480, height = 480)
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
dev.off()
##plot3
png("plots/plot3.png", width = 480, height = 480)
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
## plot4
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
install.packages("tidyr")
setwd("/Users/bikash/repos/kaggleCompetition1/marchMania2016")
#Init & Directories------------------------------------------
rm(list=ls(all=TRUE))
#Libraries
require("rjson")
require("parallel")
require("data.table")
require("doParallel")
require("glmnet")
require("leaps")
require("ggplot2")
require("Metrics")
numCores <- detectCores()
numCores
setwd("/Users/bikash/repos/kaggleCompetition1/marchMania2016")
#Detect available cores
numCores <- detectCores()
#Define helper mining functions
source("utils.R")
seasonCompact <- fread("input/RegularSeasonCompactResults.csv")
seasonDetailed <- fread("input/RegularSeasonDetailedResults.csv")
seasons <- fread("input/Seasons.csv")
teams <- fread( "input/Teams.csv")
tourneyCompact <- fread("input/TourneyCompactResults.csv")
tourneyDetailed <- fread("input/TourneyDetailedResults.csv")
tourneySeeds <- fread("input/TourneySeeds.csv")
tourneySlots <- fread("input/TourneySlots.csv")
head(seasonCompact)
#Generated Data--------------------------------------
#teamsBySeason since 2003
allSeasons <- seq(2003, 2015)
#Average points past tournaments and winning percentage
averagePointsList <- lapply(allSeasons, function(marchSeason){
seasonIdx <- which(tourneyCompact$season == marchSeason)
teamsInTourney <- union(unique(tourneyCompact$wteam[seasonIdx]), unique(tourneyCompact$lteam[seasonIdx]))
teamsScores <- t(sapply(teamsInTourney, function(marchTeam){
winningScores <- tourneyCompact$wscore[seasonIdx][tourneyCompact$wteam[seasonIdx] == marchTeam]
losingScores <- tourneyCompact$lscore[seasonIdx][tourneyCompact$lteam[seasonIdx] == marchTeam]
#Winning Percentage
totalGamesPlayed <- length(winningScores) + length(losingScores)
winningPercentage <- length(winningScores) / totalGamesPlayed
return(c(marchTeam, mean(c(winningScores, losingScores)), winningPercentage))
}))
return(teamsScores)
})
names(averagePointsList) <- allSeasons
#teamsBySeason since 2003
allSeasons <- seq(2003, 2016)
#Average points scored and recieved during the season and averages
pointsSeasonList <- lapply(allSeasons, function(marchSeason){
seasonIdx <- which(seasonCompact$season == marchSeason)
teamsInTourney <- tourneySeeds$team[which(tourneySeeds$season == marchSeason)]
teamsScores <- t(sapply(teamsInTourney, function(marchTeam){
#For points
winningPointsMade <- seasonCompact$wscore[seasonIdx][seasonCompact$wteam[seasonIdx] == marchTeam]
losingPointsMade <- seasonCompact$lscore[seasonIdx][seasonCompact$lteam[seasonIdx] == marchTeam]
#Against points
winningPointsAgainst <- seasonCompact$lscore[seasonIdx][seasonCompact$wteam[seasonIdx] == marchTeam]
losingPointsAgainst <- seasonCompact$wscore[seasonIdx][seasonCompact$lteam[seasonIdx] == marchTeam]
return(c(marchTeam,
mean(c(winningPointsMade, losingPointsMade)),
mean(c(winningPointsAgainst, losingPointsAgainst))))
}))
return(teamsScores)
})
names(pointsSeasonList) <- allSeasons
#Data Mining (Functions)------------------------
#Obtain Massey Rankings
rankingsColNames <- unique(MasseyOrdinals$sys_name)
getExtraRankings <- function(seasonMatch, teamMatch){
masseyData <- MasseyOrdinals[MasseyOrdinals$team == teamMatch & MasseyOrdinals$season == seasonMatch] #it only takes 0.19s, better than SQL
rankingSys <- match(masseyData$sys_name, rankingsColNames)
extraRankingsTeam <- sapply(1:130, function(rankColNum){
IdxSys <- which(rankingSys == rankColNum)
mostRecentIdxSys <- IdxSys[which.max(masseyData$rating_day_num[IdxSys])]
colRank <- ifelse(length(mostRecentIdxSys) != 0, masseyData$orank[mostRecentIdxSys], NA)
return(colRank)
})
return(extraRankingsTeam)
}
#Shuffle Winning teams with their corresponding features
makeTrainTable <- function(gamesIdx, shufIdxs, returnPointspread = TRUE){
wTeamSeed <- getSeedDivision(tourneyCompact$season[gamesIdx], tourneyCompact$wteam[gamesIdx])
lTeamSeed <- getSeedDivision(tourneyCompact$season[gamesIdx], tourneyCompact$lteam[gamesIdx])
#Ordinal Ranks
wTeamOrdinalRanks <- getExtraRankings(tourneyCompact$season[gamesIdx], tourneyCompact$wteam[gamesIdx])[1:33]
lTeamOrdinalRanks <- getExtraRankings(tourneyCompact$season[gamesIdx], tourneyCompact$lteam[gamesIdx])[1:33]
#Transform Ordinals to power ratings
wTeamPowerRatings <- 100 - 4* log(wTeamOrdinalRanks + 1) - wTeamOrdinalRanks / 22
lTeamPowerRatings <- 100 - 4* log(lTeamOrdinalRanks + 1) - lTeamOrdinalRanks / 22
#Seeds Power Ranking
wPowerSeeds <- 100 - 4 * log(as.numeric(wTeamSeed[1]) + 1) - as.numeric(wTeamSeed[1]) / 22
lPowerSeeds <- 100 - 4 * log(as.numeric(lTeamSeed[1]) + 1) - as.numeric(lTeamSeed[1]) / 22
#Average Scores & Winning percentages
wTeamScoreAndWins <- getScoreAndWins(tourneyCompact$season[gamesIdx] - 1, tourneyCompact$wteam[gamesIdx])
lTeamScoreAndWins <- getScoreAndWins(tourneyCompact$season[gamesIdx] - 1, tourneyCompact$lteam[gamesIdx])
wTeamScoreAndWins2Years <- getScoreAndWins(tourneyCompact$season[gamesIdx] - 2, tourneyCompact$wteam[gamesIdx])
lTeamScoreAndWins2Years <- getScoreAndWins(tourneyCompact$season[gamesIdx] - 2, tourneyCompact$lteam[gamesIdx])
wTeamScoreAndWins3Years <- getScoreAndWins(tourneyCompact$season[gamesIdx] - 3, tourneyCompact$wteam[gamesIdx])
lTeamScoreAndWins3Years <- getScoreAndWins(tourneyCompact$season[gamesIdx] - 3, tourneyCompact$lteam[gamesIdx])
#Average Points for and against during regular season
wForAndAgainstPoints <- getForAndAgainstPoints(tourneyCompact$season[gamesIdx], tourneyCompact$wteam[gamesIdx])
lForAndAgainstPoints <- getForAndAgainstPoints(tourneyCompact$season[gamesIdx], tourneyCompact$lteam[gamesIdx])
if (shufIdxs[gamesIdx] == 1){
#Seed Based Benchmark
seedBasedBenchmark <- 0.5 + (as.numeric(lTeamSeed[1]) - as.numeric(wTeamSeed[1])) * 0.03
shuffledTeams <- c(tourneyCompact$wteam[gamesIdx], tourneyCompact$lteam[gamesIdx],
wTeamSeed, lTeamSeed, seedBasedBenchmark,
(wPowerSeeds - lPowerSeeds),
(wTeamPowerRatings - lTeamPowerRatings), mean((wTeamPowerRatings - lTeamPowerRatings), na.rm = TRUE),
wTeamScoreAndWins - lTeamScoreAndWins,
wTeamScoreAndWins2Years - lTeamScoreAndWins2Years,
wTeamScoreAndWins3Years - lTeamScoreAndWins3Years,
wForAndAgainstPoints, lForAndAgainstPoints,
tourneyCompact$wscore[gamesIdx] - tourneyCompact$lscore[gamesIdx])
}else{
#Seed Based Benchmark
seedBasedBenchmark <- 0.5 + (as.numeric(wTeamSeed[1]) - as.numeric(lTeamSeed[1])) * 0.03
shuffledTeams <- c(tourneyCompact$lteam[gamesIdx], tourneyCompact$wteam[gamesIdx],
lTeamSeed, wTeamSeed, seedBasedBenchmark,
(lPowerSeeds - wPowerSeeds),
(lTeamPowerRatings - wTeamPowerRatings),  mean((lTeamPowerRatings - wTeamPowerRatings), na.rm = TRUE),
lTeamScoreAndWins - wTeamScoreAndWins,
lTeamScoreAndWins2Years - wTeamScoreAndWins2Years,
lTeamScoreAndWins3Years - wTeamScoreAndWins3Years,
lForAndAgainstPoints, wForAndAgainstPoints,
tourneyCompact$lscore[gamesIdx] - tourneyCompact$wscore[gamesIdx])
}
return(shuffledTeams)
}
#Create Test Table
makeTestTable <- function(testIdx, team1Vector, team2Vector, season){
#Get seeds from both teams
team1Seed <- getSeedDivision(season, team1Vector[testIdx])
team2Seed <- getSeedDivision(season, team2Vector[testIdx])
#Ordinal Rankings
team1OrdinalRanks <- getExtraRankings(season, team1Vector[testIdx])[1:33]
team2OrdinalRanks <- getExtraRankings(season, team2Vector[testIdx])[1:33]
#Transform Ordinals to power ratings
team1PowerRatings <- 100 - 4* log(team1OrdinalRanks + 1) - team1OrdinalRanks / 22
team2PowerRatings <- 100 - 4* log(team2OrdinalRanks + 1) - team2OrdinalRanks / 22
#Seeds Power Ranking
team1PowerSeeds <- 100 - 4* log(as.numeric(team1Seed[1]) + 1) - as.numeric(team1Seed[1]) / 22
team2PowerSeeds <- 100 - 4* log(as.numeric(team2Seed[1]) + 1) - as.numeric(team2Seed[1]) / 22
#Average Scores & Winning percentages
team1ScoreAndWins <- getScoreAndWins(season - 1, team1Vector[testIdx])
team2ScoreAndWins <- getScoreAndWins(season - 1, team2Vector[testIdx])
team1ScoreAndWins2Years <- getScoreAndWins(season - 2, team1Vector[testIdx])
team2ScoreAndWins2Years <- getScoreAndWins(season - 2, team2Vector[testIdx])
team1ScoreAndWins3Years <- getScoreAndWins(season - 3, team1Vector[testIdx])
team2ScoreAndWins3Years <- getScoreAndWins(season - 3, team2Vector[testIdx])
#Average Points for and against during regular season
team1ForAndAgainstPoints <- getForAndAgainstPoints(season, team1Vector[testIdx])
team2ForAndAgainstPoints <- getForAndAgainstPoints(season, team2Vector[testIdx])
#Seed Based Benchmark
seedBasedBenchmark <- 0.5 + (as.numeric(team2Seed[1]) - as.numeric(team1Seed[1])) * 0.03
#Make a vector containing the features
matchTeams <- c(team1Vector[testIdx], team2Vector[testIdx],
team1Seed, team2Seed, seedBasedBenchmark,
(team1PowerSeeds - team2PowerSeeds),
(team1PowerRatings - team2PowerRatings), mean((team1PowerRatings - team2PowerRatings), na.rm = TRUE),
team1ScoreAndWins - team2ScoreAndWins,
team1ScoreAndWins2Years - team2ScoreAndWins2Years,
team1ScoreAndWins3Years - team2ScoreAndWins3Years,
team1ForAndAgainstPoints, team2ForAndAgainstPoints)
return(matchTeams)
}
#Build the full training data.frame (2003-2015)
#Training Data 2003 - 2015
#Build the full training data.frame (2003-2015)
#Training Data 2003 - 2015
first2003Idx <- min(which(tourneyCompact$season == 2003))
seasonDate <- 2016
set.seed(1001010)
positionShuffles <- rbinom(nrow(tourneyCompact), 1, 0.5)
lastIdx <- max(which(tourneyCompact$season == seasonDate - 1))
teamsGamesUnlisted <- unlist(mclapply(seq(first2003Idx, lastIdx), makeTrainTable, mc.cores = numCores,
shufIdxs = positionShuffles))
teamsShuffledMatrixFull <- as.data.frame(matrix(teamsGamesUnlisted, nrow = length(seq(first2003Idx, lastIdx)), byrow = TRUE),
stringsAsFactors = FALSE)
validColTrain <- sapply(names(teamsShuffledMatrixFull)[-length(names(teamsShuffledMatrixFull))], function(nam){
return(sum(is.na(teamsShuffledMatrixFull[, nam])))
})
