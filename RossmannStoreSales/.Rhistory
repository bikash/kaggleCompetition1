y <- plyr::mapvalues(train.data$TripType, from = outcomes$TripType, to = outcomes$Index)
train.data$label <- y
library(dplyr)
library(ggvis)
train.data %>%
group_by(label) %>%
summarize(count=length(label)) %>%
ggvis(~label, ~count) %>%
layer_bars(fill:="#20beff")
head(train.data)
train.data$dep <- as.integer(train.data$DepartmentDescription)
head(train.data)
train.data$dep <- as.integer(train.data$DepartmentDescription)
train.data %>%
group_by(dep) %>%
summarize(count=length(dep)) %>%
ggvis(~dep, ~count) %>%
layer_bars(fill:="#20beff")
train.data %>%
group_by(FinelineNumber) %>%
summarize(count=length(FinelineNumber)) %>%
ggvis(~FinelineNumber, ~count) %>%
layer_bars(fill:="#20beff")
train.data %>%
group_by(Upc) %>%
summarize(count=length(Upc)) %>%
ggvis(~Upc, ~count) %>%
layer_bars(fill:="#20beff")
##training data VS Weekday
train.data$wday <- as.integer(train.data$Weekday)
train.data %>%
group_by(wday) %>%
summarize(count=length(wday)) %>%
ggvis(~wday, ~count) %>%
layer_bars(fill:="#20beff")
test$wday <- as.integer(test$Weekday)
test %>%
group_by(wday) %>%
summarize(count=length(wday)) %>%
ggvis(~wday, ~count) %>%
layer_bars(fill:="#20beff")
head(train.data)
# event 16 is not present in the dataset
t <- model.matrix(~ 0 + VisitNumber + Upc, data = train.data) %>% as.data.table()
t <- model.matrix(~ 0 + VisitNumber + Upc, data = train.data) %>% as.data.table()
t <- aggregate(. ~ VisitNumber, data = t, FUN = sum)
library(data.table)
t <- model.matrix(~ 0 + VisitNumber + Upc, data = train.data) %>% as.data.table()
head(t)
t <- aggregate(. ~ VisitNumber, data = t, FUN = sum)
head(t)
mtcars[with(mtcars, order(cyl, disp)), ]
arrange(mtcars, cyl, disp)
setwd("/Users/bikash/repos/kaggleCompetition1/TelstraNetworkFailure")
set.seed(12345)
time.start <- Sys.time()
logfile <- "data/xgblog.txt"
if (!file.exists(logfile)) {
file.create(logfile)
}
map <- plyr::mapvalues
d.event <- read.csv("data/event_type.csv") %>% data.table() %>% arrange(id) %>% rename(event = event_type)
d.feature <- read.csv("data/log_feature.csv") %>% data.table() %>% arrange(id) %>% rename(feature = log_feature)
d.resource <- read.csv("data/resource_type.csv") %>% data.table() %>% arrange(id) %>% rename(resource = resource_type)
d.severity <- read.csv("data/severity_type.csv") %>% data.table() %>% arrange(id) %>% rename(severity = severity_type)
d.test <- read.csv("data/test.csv") %>% data.table() %>% arrange(id)
d.train <- read.csv("data/train.csv") %>% data.table() %>% arrange(id) %>% rename(outcome = fault_severity)
head(d.train)
head(d.event)
d.set <- rbind(d.train, mutate(d.test, outcome = -1)) %>% arrange(id)
head(d.set)
## d.event
# event 16 is not present in the dataset
m.event <- model.matrix(~ 0 + id + event, data = d.event) %>% as.data.table()
m.event <- aggregate(. ~ id, data = m.event, FUN = sum)
## d.feature
m.feature <- dcast(d.feature, id ~ feature, value.var = "volume", fun.aggregate = sum)
names(m.feature)[2:ncol(m.feature)] <- paste0("feature", names(m.feature)[2:ncol(m.feature)])
## d.resource
m.resource <- model.matrix(~ 0 + id + resource, data = d.resource) %>% as.data.table()
m.resource <- aggregate(. ~ id, data = m.resource, FUN = sum)
## d.severity
# severity may or may not be ordinal
m.severity <- model.matrix(~ 0 + id + severity, data = d.severity)
head(m.event)
d.event <- read.csv("data/event_type.csv") %>% data.table() %>% arrange(id) %>% rename(event = event_type)
d.feature <- read.csv("data/log_feature.csv") %>% data.table() %>% arrange(id) %>% rename(feature = log_feature)
d.resource <- read.csv("data/resource_type.csv") %>% data.table() %>% arrange(id) %>% rename(resource = resource_type)
d.severity <- read.csv("data/severity_type.csv") %>% data.table() %>% arrange(id) %>% rename(severity = severity_type)
d.test <- read.csv("data/test.csv") %>% data.table() %>% arrange(id)
d.train <- read.csv("data/train.csv") %>% data.table() %>% arrange(id) %>% rename(outcome = fault_severity)
trainindex <- data.table(id = sort(unique(d.train$id)))
trainindex$index <- seq_along(trainindex$id)
testindex <- data.table(id = sort(unique(d.test$id)))
testindex$index <- seq_along(testindex$id)
totrainindex <- function(id) {
map(id, from = trainindex$id, to = trainindex$index, warn_missing = FALSE)
}
totestindex <- function(id) {
map(id, from = testindex$id, to = testindex$index, warn_missing = FALSE)
}
d.event$event <- gsub("event_type ", "", d.event$event) %>% as.integer() %>% as.factor()
d.feature$feature <- gsub("feature ", "", d.feature$feature) %>% as.integer() %>% as.factor()
d.resource$resource <- gsub("resource_type ", "", d.resource$resource) %>% as.integer() %>% as.factor()
d.severity$severity <- gsub("severity_type ", "", d.severity$severity) %>% as.integer() %>% as.factor()
d.train$location <- gsub("location ", "", d.train$location) %>% as.integer() %>% as.factor()
d.test$location <- gsub("location ", "", d.test$location) %>% as.integer() %>% as.factor()
d.set <- rbind(d.train, mutate(d.test, outcome = -1)) %>% arrange(id)
m.event <- model.matrix(~ 0 + id + event, data = d.event) %>% as.data.table()
head(m.event)
head(d.event)
# event 16 is not present in the dataset
m.event <- model.matrix(~ 0 + id + event, data = d.event) %>% as.data.table()
head(m.event)
head(train.data)
library(data.table)
t <- model.matrix(~ 0 + VisitNumber + Upc, data = train.data) %>% as.data.table()
head(t)
library(data.table)
t <- model.matrix(~ 0 + VisitNumber + FinelineNumber, data = train.data) %>% as.data.table()
head(t)
test$wday <- as.integer(test$Weekday)
test %>%
group_by(wday) %>%
summarize(count=length(wday)) %>%
ggvis(~wday, ~count) %>%
layer_bars(fill:="#20beff")
tes
library(readr)
library(xgboost)
library(lubridate)
library(plyr)
library(doMC)
registerDoMC(cores = 4)
setwd("/Users/bikash/repos/kaggleCompetition1/RossmannStoreSales")
# Set seed
set.seed(123)
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
# Merge Store stuff
head(train)
head(store)
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
train <- merge(train,store)
test <- merge(test,store)
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
cat("train data column names and details\n")
names(train)
str(train)
summary(train)
cat("test data column names and details\n")
names(test)
str(test)
summary(test)
head(train)
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
# Merge Store stuff
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
train <- merge(train,store)
test <- merge(test,store)
##replace NA to default value
train$CompetitionOpenSinceMonth[is.na(train$CompetitionOpenSinceMonth)] <- 8
test$CompetitionOpenSinceMonth[is.na(test$CompetitionOpenSinceMonth)] <- 8
train$CompetitionOpenSinceYear[is.na(train$CompetitionOpenSinceYear)] <- 2009
test$CompetitionOpenSinceYear[is.na(test$CompetitionOpenSinceYear)] <- 2009
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
cat("train data column names and details\n")
names(train)
str(train)
summary(train)
cat("test data column names and details\n")
names(test)
str(test)
summary(test)
# looking at only stores that were open in the train set
# may change this later
train <- train[ which(train$Open=='1'),]
train <- train[ which(train$Sales!='0'),]
# seperating out the elements of the date column for the train set
train$month <- as.integer(format(train$Date, "%m"))
train$year <- as.integer(format(train$Date, "%y"))
train$day <- as.integer(format(train$Date, "%d"))
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
train <- train[,-c(3,8)]
# seperating out the elements of the date column for the test set
test$month <- as.integer(format(test$Date, "%m"))
test$year <- as.integer(format(test$Date, "%y"))
test$day <- as.integer(format(test$Date, "%d"))
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
test <- test[,-c(4,7)]
feature.names <- names(train)[c(1,2,5:19)]
cat("Feature Names\n")
feature.names
cat("assuming text variables are categorical & replacing them with numeric ids\n")
for (f in feature.names) {
if (class(train[[f]])=="character") {
levels <- unique(c(train[[f]], test[[f]]))
train[[f]] <- as.integer(factor(train[[f]], levels=levels))
test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
}
}
cat("train data column names after slight feature engineering\n")
names(train)
cat("test data column names after slight feature engineering\n")
names(test)
tra<-train[,feature.names]
RMPSE<- function(preds, dtrain) {
labels <- getinfo(dtrain, "label")
elab<-exp(as.numeric(labels))-1
epreds<-exp(as.numeric(preds))-1
err <- sqrt(mean((epreds/elab-1)^2))
return(list(metric = "RMPSE", value = err))
}
nrow(train)
h<-sample(nrow(train),10000)
dval<-xgb.DMatrix(data=data.matrix(tra[h,]),label=log(train$Sales+1)[h])
dtrain<-xgb.DMatrix(data=data.matrix(tra[-h,]),label=log(train$Sales+1)[-h])
watchlist<-list(val=dval,train=dtrain)
param <- list(  objective           = "reg:linear",
booster = "gbtree",
eta                 = 0.02, # 0.06, #0.01,
max_depth           = 10, #changed from default of 8
subsample           = 0.9, # 0.7
colsample_bytree    = 0.7 # 0.7
#num_parallel_tree   = 2
# alpha = 0.0001,
# lambda = 1
)
clf <- xgb.train(   params              = param,
data                = dtrain,
nrounds             = 3000, #300, #280, #125, #250, # changed from 300
verbose             = 1,
early.stop.round    = 100,
watchlist           = watchlist,
maximize            = FALSE,
feval=RMPSE
)
feature.names
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
# Merge Store stuff
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
train <- merge(train,store)
test <- merge(test,store)
##replace NA to default value
train$CompetitionOpenSinceMonth[is.na(train$CompetitionOpenSinceMonth)] <- 8
test$CompetitionOpenSinceMonth[is.na(test$CompetitionOpenSinceMonth)] <- 8
train$CompetitionOpenSinceYear[is.na(train$CompetitionOpenSinceYear)] <- 2009
test$CompetitionOpenSinceYear[is.na(test$CompetitionOpenSinceYear)] <- 2009
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
cat("train data column names and details\n")
names(train)
str(train)
summary(train)
cat("test data column names and details\n")
names(test)
str(test)
summary(test)
ooking at only stores that were open in the train set
# may change this later
train <- train[ which(train$Open=='1'),]
train <- train[ which(train$Sales!='0'),]
# seperating out the elements of the date column for the train set
train$month <- as.integer(format(train$Date, "%m"))
train$year <- as.integer(format(train$Date, "%y"))
train$day <- as.integer(format(train$Date, "%d"))
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
train <- train[,-c(3,8)]
# seperating out the elements of the date column for the test set
test$month <- as.integer(format(test$Date, "%m"))
test$year <- as.integer(format(test$Date, "%y"))
test$day <- as.integer(format(test$Date, "%d"))
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
test <- test[,-c(4,7)]
train$month <- as.integer(format(train$Date, "%m"))
head(train$Date)
head(train)
# Based on Ben Hamner script from Springleaf
# https://www.kaggle.com/benhamner/springleaf-marketing-response/random-forest-example
library(readr)
library(xgboost)
library(lubridate)
library(plyr)
library(doMC)
registerDoMC(cores = 4)
setwd("/Users/bikash/repos/kaggleCompetition1/RossmannStoreSales")
# Set seed
set.seed(123)
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
# Merge Store stuff
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
train <- merge(train,store)
test <- merge(test,store)
##replace NA to default value
train$CompetitionOpenSinceMonth[is.na(train$CompetitionOpenSinceMonth)] <- 8
test$CompetitionOpenSinceMonth[is.na(test$CompetitionOpenSinceMonth)] <- 8
train$CompetitionOpenSinceYear[is.na(train$CompetitionOpenSinceYear)] <- 2009
test$CompetitionOpenSinceYear[is.na(test$CompetitionOpenSinceYear)] <- 2009
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
cat("train data column names and details\n")
names(train)
str(train)
summary(train)
cat("test data column names and details\n")
names(test)
str(test)
summary(test)
train <- train[ which(train$Open=='1'),]
train <- train[ which(train$Sales!='0'),]
train$month <- as.integer(format(train$Date, "%m"))
require(data.table)
require(xgboost)
train$month <- as.integer(format(train$Date, "%m"))
train[,Date:=as.Date(train$Date)]
train$Date <- ymd(train$Date)
test$Date <- ymd(test$Date)
train$day <- as.factor(day(train$Date))
test$day <- as.factor(day(test$Date))
train$month <- as.factor(month(train$Date))
test$month <- as.factor(month(test$Date))
train$year <- as.factor(year(train$Date))
test$year <- as.factor(year(test$Date))
head(train)
head(train[,c(3,8)])
head(test[,c(4,7)])
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
train <- train[,-c(3,8)]
# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
test <- test[,-c(4,7)]
names(train)[c(1,2,5:19)]
names(train)
feature.names <- names(train)[c(1,2,5:19)]
cat("Feature Names\n")
feature.names
cat("assuming text variables are categorical & replacing them with numeric ids\n")
for (f in feature.names) {
if (class(train[[f]])=="character") {
levels <- unique(c(train[[f]], test[[f]]))
train[[f]] <- as.integer(factor(train[[f]], levels=levels))
test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
}
}
cat("train data column names after slight feature engineering\n")
names(train)
cat("test data column names after slight feature engineering\n")
names(test)
tra<-train[,feature.names]
RMPSE<- function(preds, dtrain) {
labels <- getinfo(dtrain, "label")
elab<-exp(as.numeric(labels))-1
epreds<-exp(as.numeric(preds))-1
err <- sqrt(mean((epreds/elab-1)^2))
return(list(metric = "RMPSE", value = err))
}
nrow(train)
h<-sample(nrow(train),10000)
dval<-xgb.DMatrix(data=data.matrix(tra[h,]),label=log(train$Sales+1)[h])
dtrain<-xgb.DMatrix(data=data.matrix(tra[-h,]),label=log(train$Sales+1)[-h])
watchlist<-list(val=dval,train=dtrain)
param <- list(  objective           = "reg:linear",
booster = "gbtree",
eta                 = 0.015, # 0.06, #0.01,
max_depth           = 10, #changed from default of 8
subsample           = 0.9, # 0.7
colsample_bytree    = 0.7 # 0.7
#num_parallel_tree   = 2
# alpha = 0.0001,
# lambda = 1
)
clf <- xgb.train(   params              = param,
data                = dtrain,
nrounds             = 3200, #300, #280, #125, #250, # changed from 300
verbose             = 1,
early.stop.round    = 100,
watchlist           = watchlist,
maximize            = FALSE,
feval=RMPSE
)
pred1 <- exp(predict(clf, data.matrix(test[,feature.names]))) -1
submission <- data.frame(Id=test$Id, Sales=pred1)
cat("saving the submission file\n")
write_csv(submission, "output/xgb.csv")
o <- read.table("output/rf1.csv",sep=',',header = T)
head(o)
arrange()
arrange
arrange(o,"Id")
arrange(o, Id, Sales)
head(arrange(o, Id, Sales))
d <- arrange(o, Id, Sales)
head(d)
write_csv(d, "output/xgb.csv")
# Load Dependeicies
library(caret)
library(randomForest)
library(readr)
library(lubridate)
library(plyr)
library(doMC)
registerDoMC(cores = 4)
setwd("/Users/bikash/repos/kaggleCompetition1/RossmannStoreSales")
# Set seed
set.seed(12345)
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
# Merge Store stuff
train <- merge(train,store)
test <- merge(test,store)
## summary of data
cat("train data column names and details\n")
names(train)
str(train)
summary(train)
cat("test data column names and details\n")
names(test)
str(test)
summary(test)
# Only evaludated on Open days
train <- train[ which(train$Open=='1'),]
train$Open <- NULL
test$Open <- NULL
train$PromoInterval <-NULL
test$PromoInterval <-NULL
# Date stuff
train$Date <- ymd(train$Date)
test$Date <- ymd(test$Date)
train$day <- as.factor(day(train$Date))
test$day <- as.factor(day(test$Date))
train$month <- as.factor(month(train$Date))
test$month <- as.factor(month(test$Date))
train$year <- as.factor(year(train$Date))
test$year <- as.factor(year(test$Date))
train$Date <- NULL
test$Date <- NULL
# always 1 for training and test
train$StateHoliday <- NULL
test$StateHoliday <- NULL
#Factorize stuff
train$DayOfWeek <- as.factor(train$DayOfWeek)
test$DayOfWeek <- as.factor(test$DayOfWeek)
train$Promo <- as.factor(train$Promo)
test$Promo <- as.factor(test$Promo)
train$SchoolHoliday <- as.factor(train$SchoolHoliday)
test$SchoolHoliday <- as.factor(test$SchoolHoliday)
# Factorize store stuff
train$StoreType <- as.factor(train$StoreType)
test$StoreType <- as.factor(test$StoreType)
train$Assortment <- as.factor(train$Assortment)
test$Assortment <- as.factor(test$Assortment)
train$CompetitionDistance <- as.numeric(train$CompetitionDistance)
test$CompetitionDistance <- as.numeric(test$CompetitionDistance)
train$Promo2 <- as.factor(train$Promo2)
test$Promo2 <- as.factor(test$Promo2)
train$PromoInterval <- as.factor(train$PromoInterval)
test$PromoInterval <- as.factor(test$PromoInterval)
##replace NA to default value
train$CompetitionOpenSinceMonth[is.na(train$CompetitionOpenSinceMonth)] <- 8
test$CompetitionOpenSinceMonth[is.na(test$CompetitionOpenSinceMonth)] <- 8
train$CompetitionOpenSinceYear[is.na(train$CompetitionOpenSinceYear)] <- 2009
test$CompetitionOpenSinceYear[is.na(test$CompetitionOpenSinceYear)] <- 2009
competition_start <- strptime('20.10.2015', format='%d.%m.%Y')
train$CompetitionDaysOpen <- as.numeric(difftime(competition_start,
strptime(paste('1',
train$CompetitionOpenSinceMonth,
train$CompetitionOpenSinceYear, sep = '.'),
format='%d.%m.%Y'), units='days'))
test$CompetitionDaysOpen <- as.numeric(difftime(competition_start,
strptime(paste('1',
test$CompetitionOpenSinceMonth,
test$CompetitionOpenSinceYear, sep = '.'),
format='%d.%m.%Y'), units='days'))
train$CompetitionDaysOpen[is.na(train$CompetitionDaysOpen)] <- 0
test$CompetitionDaysOpen[is.na(test$CompetitionDaysOpen)] <- 0
train$CompetitionWeeksOpen <- train$CompetitionDaysOpen/7
test$CompetitionWeeksOpen <- test$CompetitionDaysOpen/7
train$CompetitionMonthsOpen <- train$CompetitionDaysOpen/30
test$CompetitionMonthsOpen <- test$CompetitionDaysOpen/30
train$CompetitionYearsOpen <- train$CompetitionWeeksOpen/52
test$CompetitionYearsOpen <- test$CompetitionWeeksOpen/52
train$CompetitionOpenSinceMonth <- NULL
train$CompetitionOpenSinceYear <- NULL
test$CompetitionOpenSinceMonth <- NULL
test$CompetitionOpenSinceYear <- NULL
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
# target variables
train$Sales <- as.numeric(train$Sales)
train$Customers <- NULL #as.numeric(train$Customers)
train$Sales <- log(train$Sales+1)
head(train)
set.seed(1785)
fitControl <- trainControl(method="cv", number=3, verboseIter=T)
rfFit <- train(Sales ~.,
method="rf", data=train, ntree=50, importance=TRUE,
sampsize=100000,
do.trace=10, trControl=fitControl)
