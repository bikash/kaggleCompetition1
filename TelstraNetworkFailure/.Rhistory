train$week = week(as.Date(train$Date,"%y/%m/%d"))
train$month = month(as.Date(train$Date,"%y/%m/%d"))
train$year = year(as.Date(train$Date,"%y/%m/%d"))
head(train)
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
str(train) #1017209
str(store) ##1115
str(test) #41088
summary(train)
summary(test)
train<- merge(store, train, by="Store")
test<- merge(store, test, by="Store")
#Lets explore the sales data for a quick seconds
hist(train$Sales, 100)
#Interesting. Shockingly, it seemst that stores which are not open cannot make sales.
#Since predicting the sales figures of non-open stores seems simple, we should only consider cases
#store are open
train.opensample<- subset(train, Open >0)
hist(train.opensample$Sales, 100)
#Add Year, Month, Week and Day to trainingset
train = as.data.table(train)
train$day = day(as.Date(train$Date,"%y/%m/%d"))
train$week = week(as.Date(train$Date,"%y/%m/%d"))
train$month = month(as.Date(train$Date,"%y/%m/%d"))
train$year = year(as.Date(train$Date,"%y/%m/%d"))
head(train)
library(caret)
library(data.table)
library(forecast)
library(ggplot2)
library(zoo)
require(dplyr)
library(randomForest)
setwd("/Users/bikash/repos/kaggleCompetition1/RossmannStoreSales")
# Set seed
set.seed(123)
## data load
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
str(train) #1017209
str(store) ##1115
str(test) #41088
# check is.na
sum(is.na(subtrain))  # 0
sum(is.na(train))     # 0
sum(is.na(stores))                           # 1799
sum(is.na(stores$CompetitionDistance))        #   3
sum(is.na(stores$CompetitionOpenSinceYear))   # 354
sum(is.na(stores$CompetitionOpenSinceMonth))  # 354
sum(is.na(stores$Promo2SinceYear))            # 544
sum(is.na(stores$Promo2SinceWeek))            # 544
sum(is.na(train))     # 0
sum(is.na(store))                           # 1799
sum(is.na(store$CompetitionDistance))        #   3
sum(is.na(store$CompetitionOpenSinceYear))   # 354
sum(is.na(store$CompetitionOpenSinceMonth))  # 354
sum(is.na(store$Promo2SinceYear))            # 544
sum(is.na(store$Promo2SinceWeek))            # 544
train$Date <- ymd(train$Date)
test$Date <- ymd(test$Date)
train$day <- as.factor(day(train$Date))
test$day <- as.factor(day(test$Date))
train$month <- as.factor(month(train$Date))
test$month <- as.factor(month(test$Date))
train$year <- as.factor(year(train$Date))
test$year <- as.factor(year(test$Date))
head(train)
head(test)
days_open = train[,list(count = sum(Open)), by = list(Store)]
days_open = train[,list(count = sum(train$Open)), by = list(train$Store)]
list(count = sum(train$Open)), by = list(train$Store)
list(count = sum(train$Open), by = list(train$Store))
list(count = sum(train$Open))
days_open = train[,list(count = sum(train$Open), by = list(train$Store))]
list(count = sum(train$Open), by = list(train$Store))
list(count = sum(train$Open))
days_open = train[,(list(count = sum(train$Open)), by = list(train$Store))]
specific_store = train[Store == 85]
head(train)
train$Store == 85
train <- merge(train,store)
test <- merge(test,store)
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
head(train)
head(test)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
panel.lmline()
#The following code does NOT result in a plot appearing on the screen device.
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(123)
## data load
data <- read.table("household_power_consumption.txt",sep=',',header = T)
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", colClasses=c("character", "character", rep("numeric",7)), na="?")
data
setwd("/Users/bikash/repos/Coursera-Practical-Machine-Learning/ExploratorydataScience/project1")
# Set seed
set.seed(123)
## data load
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", colClasses=c("character", "character", rep("numeric",7)), na="?")
head(data)
str(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
head(daya)
head(data)
data_sub <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
str(data_sub)
data$Datetime <- as.POSIXct(paste(as.Date(data_sub$Date), data_sub$Time))
date <- paste(as.Date(data_sub$Date), data_sub$Time)
data$Datetime <- as.POSIXct(date)
date <- paste(as.Date(data_sub$Date), data_sub$Time)
data_sub$Datetime <- as.POSIXct(date)
head(data_sub)
hist(data_sub$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
plot(data_sub$Datetime,data_sub$Global_active_power, main="Global Active Power",lab="Global Active Power (kilowatts)", ylab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, main="Global Active Power",xlab="Global Active Power (kilowatts)", ylab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, main="Global Active Power", ylab="Global Active Power (kilowatts)", xlab="date", type"1")
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="Global Active Power", ylab="Global Active Power (kilowatts)", xlab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
head(data_sub
)
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
line(data_sub$Datetime,data_sub$Sub_metering_1,type="l")
plot(NULL, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
lines(data_sub$Sub_metering_1, type="o", pch=22, lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
lines(data_sub$Sub_metering_2, type="o", pch=22, lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
plot(NULL, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="o",  lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", lty=2, col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
##plot3
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
head(data)
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot4 <- paste(getwd(), "/plots/plot4.png", sep = "")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
plot4 <- paste(getwd(), "/plots/plot4.png", sep = "")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
##plot 1
png("plots/plot1.png", width = 480, height = 480)
hist(data_sub$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
##plot2
png("plots/plot2.png", width = 480, height = 480)
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
dev.off()
##plot3
png("plots/plot3.png", width = 480, height = 480)
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
## plot4
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
install.packages("tidyr")
library(data.table)
library(magrittr)
library(stringr)
library(ggplot2)
library(doMC)
library(caret)
#
remove0cols <- T
writeFiles <- F
computeFeatures <- T
computeManualInteractions <- T
groupCardinalities <- T
log_feature_rarityThreshold <- 50
event_type_rarity_threshold <- 5
#
setwd("/Users/bikash/repos/kaggleCompetition1/TelstraNetworkFailure")
source('utils.R')
train <- fread("data/train.csv") %>% setkey(id)
test <- fread("data/test.csv") %>% setkey(id)
log_feature <-fread("data/log_feature.csv") %>% setkey(id)
event_type <-fread("data/event_type.csv") %>% setkey(id)
resource_type <-fread("data/resource_type.csv") %>% setkey(id)
severity_type <- fread("data/severity_type.csv") %>% setkey(id)
log_feature[, ":="(numlf = makeNumeric(log_feature), log_feature = makeReadable(log_feature))]
event_type[, ":="(numet = makeNumeric(event_type), event_type = makeReadable(event_type))]
resource_type[, ":="(resource_type = makeReadable(resource_type))]
severity_type[, ":="(numst = makeNumeric(severity_type), severity_type = makeReadable(severity_type))]
train[, ":="(numloc = makeNumeric(location),
location = makeReadable(location))]
test[, ":="(numloc = makeNumeric(location),
location = makeReadable(location), fault_severity = -1)]
total <- rbind(train, test)%>%setkey("id")
total <-total[1:1000,]
if(groupCardinalities){
#LF reduction
rare_lf <- log_feature[total][,.N, by=log_feature][N<=log_feature_rarityThreshold][,log_feature]
log_feature$log_feature[log_feature$log_feature%in%rare_lf] <- "rare_lf"
rare_et <- event_type[total][,.N, by=event_type][N<=event_type_rarity_threshold][,event_type]
event_type$event_type[event_type$event_type%in%rare_et] <- "rare_et"
rm(list=c("rare_lf", "rare_et"))
}
if(computeFeatures){
t1 <- log_feature[total][,.(
loc_nid = unique(id),
loc_nlf = unique(log_feature),
loc_sumvol = sum(volume),
loc_avgvol = mean(volume),
loc_sdvol = ifelse(is.na(sd(volume)), 0, sd(volume)),
loc_logvol = log(sum(volume)),
loc_vollog = sum(log(volume+1)),
loc_sqrtvol = sqrt(sum(volume)),
loc_volsqrt = sum(sqrt(volume))), keyby=location]
t2 <- resource_type[total][, .(loc_nrt = unique(resource_type)), keyby=location]
t3 <- event_type[total][, .(loc_net = unique(event_type)), keyby=location]
t4 <- severity_type[total][, .(loc_nst = unique(severity_type)), keyby=location]
joined_total <- resource_type[event_type,allow.cartesian=TRUE][severity_type][total]
# nombres de combinaisons différentes de resource_type/event_type par location
t5 <- joined_total[,etrtcomb := paste(resource_type, event_type, sep = "x")][, .(loc_etrtcomb = unique(etrtcomb)), keyby=location]
t6 <- joined_total[,etstcomb := paste(severity_type, event_type, sep = "x")][, .(loc_etstcomb = unique(etstcomb)), keyby=location]
t7 <- joined_total[,rtstcomb := paste(severity_type, resource_type, sep = "x")][, .(loc_rtstcomb = unique(rtstcomb)), keyby=location]
location_info_total <- t1[t2,allow.cartesian=TRUE][t3,allow.cartesian=TRUE][t4,allow.cartesian=TRUE][t5,allow.cartesian=TRUE][t6,allow.cartesian=TRUE][t7,allow.cartesian=TRUE]
# tests sur les log features en temps que numérique moyenne/id, somme/id, etc
lf_info <- log_feature[total][,.(
sumlf = sum(numlf),
avglf = mean(numlf),
sdlf = ifelse(is.na(sd(numlf)), 0, sd(numlf)),
minlf = min(numlf),
maxlf = max(numlf)),by=id]
# moyenne numerique de l'event_type * severity_type
etst <- event_type[, .(
id,
minumet = min(numet),
maxnumet = max(numet),
avgnumet = mean(numet)), by=id][severity_type][total][,.(et.st = avgnumet*numst),by=id]
total <- total[lf_info][etst]
total <- merge(total, location_info_total, by = "location",allow.cartesian=TRUE)
}
setkeyv(total[,":="(location=NULL)], c("id", "fault_severity"))
# drop NA value
na.ids <- log_feature[total,allow.cartesian=TRUE][fault_severity != -1][is.na(log_feature)][,id]
if(length(na.ids) > 0)
total <- total[-na.ids]
####################################
# dcast des data pour avoir une ligne par id
# total_lf_volume  <- dcast(
#   log_feature[total],
#   id + fault_severity ~ log_feature,
#   value.var = list("volume", "log_feature"),
#   fun = list(sum, length)
# )
library(reshape2)
# on garde uniquement le volume
total_lf_volume  <- dcast( log_feature[total,allow.cartesian=TRUE],
id + fault_severity ~ log_feature, value.var = "volume",  fun = sum)
total_et <-
dcast(event_type[total,allow.cartesian=TRUE], id + fault_severity ~ event_type, value.var = "event_type", fun = length)
total_rt <-
dcast(
resource_type[total,allow.cartesian=TRUE], id + fault_severity ~ resource_type, value.var = "resource_type", fun = length
)
total_st <-
dcast(
severity_type[total,allow.cartesian=TRUE], id + fault_severity ~ severity_type, value.var = "severity_type", fun = length
)
total.wide <- total[total_lf_volume][total_et][total_rt][total_st]
######################################################################################
#calculs d'intercations entre event_type, resource_types, log_features
if(computeManualInteractions){
total.wide[,":="(
som_vol_test = (f203 * f312 * f232 * f170),
som_vol_feat = (f82 + f203 + f71 + f193 + f80),
som_vol_feat_c0 = (f313 + f233 + f315),
som_vol_feat_c1 = (f82 + f203 + f170),
som_vol_feat_c2 = (f71 + f193 + f80) ) ]
}
######################################################################################
## remove id from data
train.wide <- total.wide[fault_severity != -1,-1, with = FALSE]
test.wide <- total.wide[fault_severity == -1,-1, with = FALSE]
# write files with train and test
if(writeFiles){
writeLines("Writing train.csv and test.csv...")
write.csv(train.wide, paste(sep = "-", "train.csv"), row.names = F, quote = F)
write.csv(test.wide[,.SD, .SDcols = -"fault_severity"], paste(sep = "-", "test.csv"), row.names = F, quote = F)
writeLines("...done")}
## remove the categorial values loc_nlf, loc_nrt, loc_net, loc_nst, loc_etrtcomb, loc_etstcomb, loc_rtstcomb [10,18,19,20,21,22,23]
## remove fault_severity from train and it is first column so it is -1
xtrain <- as.matrix(train.wide[,-c(1,10,18,19,20,21,22,23), with = F])
names(xtrain) <- setdiff(names(train.wide), "fault_severity")
ytrain <- train.wide$fault_severity
## remove fault_severity from test and it is first column
xtest <-  as.matrix(test.wide[,-c(1,10,18,19,20,21,22,23), with = F])
names(xtest) <- setdiff(names(test.wide), "fault_severity")
test.id <- test$id
#
# folds <- createFolds(train.wide$fault_severity, k = 3)
# 80% train + 20% test
if(onFold) folds <- createDataPartition(train.wide$fault_severity, p = 0.8)
writeLines("Cleaning up...")
#rm(list=c("na.ids", "total.wide", "total_et", "total_rt", "total_st",
#          "total_lf_volume", "train.wide", "test.wide", "total",
#          "location_info_total","joined_total", "lf_info", paste0("t", 1:7)))
## xgboost
library(xgboost)
set.seed(1718)
verboseXgboost <- T
genererSubmission <- F
notifyAndroid <- F
CVonly <- T
importance <- F
onFold <- F
if(onFold){
writeLines(paste("Starting xgboost on a fold1....",nrow(xtrain[folds$Resample1,]), " lines" ))
dtrain <- xgb.DMatrix(data = xtrain[folds$Resample1,], label = ytrain[folds$Resample1])
xtest <- xtrain[-folds$Resample1,]
test.id <- test.id[-folds$Resample1]
}else{
writeLines("Starting xgboost on full train...")
dtrain <- xgb.DMatrix(data = xtrain, label = ytrain)
}
registerDoMC(cores = 4)
xgparams.tree <- list(
objective = "multi:softprob",
num_class = 3,
colsample_bytree = 0.3,
max.depth = 8,
eta = 0.05
)
xgboost.first <- xgb.cv(
data = dtrain,
params = xgparams.tree,
nrounds = 20,
nfold = 10,
metrics = "mlogloss",
verbose = verboseXgboost,
print.every.n = 200
)
cat("xVal mlogloss : ", min(xgboost.first$test.mlogloss.mean),"\n")
genererSubmission <- T
if(!CVonly)
{
pred.loop <- matrix(nrow = nrow(xtest)*3, ncol = 10)
for(index in 1:10)
{
set.seed(28021980+index)
xgboost.model <- xgboost(
data = dtrain,
params = xgparams.tree,
nrounds = which.min(xgboost.first$test.mlogloss.mean),
verbose = verboseXgboost
)
pred.loop[,index] <- xgboost::predict(xgboost.model, xtest)
}
pred.xgboost <- matrix(apply(pred.loop, MARGIN = 1, mean), ncol = 3, byrow = T)
if(importance){
writeLines("Computing importance...")
imp <- xgb.importance(feature_names = names(xtrain), model = xgboost.model)
}
if (genererSubmission) {
cat("Generating Submission...\n")
output.xgboost <- data.frame(
id = test.id,
predict_0 = pred.xgboost[,1],
predict_1 = pred.xgboost[,2],
predict_2 = pred.xgboost[,3]
)
write.csv(output.xgboost, paste(sep = "-", format(Sys.time(), "%Y%m%d.%H%M"), "xgb.csv"), row.names = F, quote = F)
}
}
msg = paste("Minimum xVal mlogloss : ", min(xgboost.first$test.mlogloss.mean))
print msg
print (msg)
pred.loop <- matrix(nrow = nrow(xtest)*3, ncol = 10)
for(index in 1:10)
{
set.seed(28021980+index)
xgboost.model <- xgboost(
data = dtrain,
params = xgparams.tree,
nrounds = which.min(xgboost.first$test.mlogloss.mean),
verbose = verboseXgboost
)
pred.loop[,index] <- xgboost::predict(xgboost.model, xtest)
}
pred.xgboost <- matrix(apply(pred.loop, MARGIN = 1, mean), ncol = 3, byrow = T)
if(importance){
writeLines("Computing importance...")
imp <- xgb.importance(feature_names = names(xtrain), model = xgboost.model)
}
if (genererSubmission) {
cat("Generating Submission...\n")
output.xgboost <- data.frame(
id = test.id,
predict_0 = pred.xgboost[,1],
predict_1 = pred.xgboost[,2],
predict_2 = pred.xgboost[,3]
)
write.csv(output.xgboost, paste(sep = "-", format(Sys.time(), "%Y%m%d.%H%M"), "xgb.csv"), row.names = F, quote = F)
}
id = test.id
id
predict_0 = pred.xgboost[,1]
predict_0
head()
length(pred.xgboost)
