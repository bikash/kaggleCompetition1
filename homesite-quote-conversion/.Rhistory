head(train)
test$Date <- as.Date(test$Date)
head(test)
store
train <- train[order(Date)]
test <- test[order(Date)]
summary(train)
train <- train[,order(Date)]
test <- test[,order(Date)]
summary(train)
head(train)
train <- train[,order(train$Date)]
summary(train)
test[is.na(test$Open), ] # Only store 622
test$Open[test$Store == 622]
test[is.na(test)] <- 1
head(test)
train[, lapply(.SD, function(x) length(unique(x)))]
train[, lapply(.SD, function(x) length(unique(x)))]
found [here](https://www.kaggle.com/c/rossmann-store-sales). The data isn't huge
found [here](https://www.kaggle.com/c/rossmann-store-sales). The data isn't huge
found [here](). The data isn't huge
found. The data isn't huge
but the speedup using data.table is noticeable. It is nice to have unmasked data which allows for some interpretations.
rmarkdown::render("test.Rmd")
rmarkdown::render("test.Rmd")
train <- train[order(Date)]
test <- test[order(Date)]
library(data.table)
library(zoo)
library(forecast)
library(ggplot2)
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
str(train)
str(test)
str(store)
train[, Date := as.Date(Date)]
test[, Date := as.Date(Date)]
store
train[, Date := as.Date(Date)]
test[, Date := as.Date(Date)]
help(":=")
library(dplyr)
library(data.table)
myfun <- function() {
DT <- data.table(a = 1:4, b = 5:8)
DT[, x := a + 2]
DT
}
myfun()
test[, Date := as.Date(Date)]
as.Date
as.Date(train$Date)
train$Date <- as.Date(train$Date)
test$Date <- as.Date(test$Date)
head(order(train))
train <- train[order(Date)]
summary(train)
summary(test)
test[is.na(test$Open), ] # Only store 622
test$Open[test$Store == 622]
test[is.na(test)] <- 1
train[, lapply(.SD, function(x) length(unique(x)))]
train[, lapply(.SD, function(x) length(unique(x)))]
library(data.table)
library(forecast)
library(ggplot2)
library(zoo)
require(dplyr)
setwd("/Users/bikash/repos/kaggleCompetition1/RossmannStoreSales")
# Set seed
set.seed(123)
## data load
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
str(train) #1017209
str(store) ##1115
str(test) #41088
train<- merge(store, train, by="Store")
test<- merge(store, test, by="Store")
hist(train$Sales, 100)
train.opensample<- subset(train, Open >0)
hist(train.opensample$Sales, 100)
library(randomForest)
library(caret)
rf1 <- randomForest( Sales~Customers+Promo+StateHoliday+SchoolHoliday, data = train.opensample, ntree= 100, importance= TRUE)
imp <- varImp(rf1)
imp
test <-importance(rf1, type=2)
featureImportance <- data.frame(Feature=row.names(test), Importance=test[,1])
p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +geom_bar(stat="identity", fill="#53cfff") +coord_flip() + theme_light(base_size=20) + ylab("Importance") + ggtitle("Random Forest Feature Importance\n") +theme(plot.title=element_text(size=18))
p
train = as.data.table(train)
train$day = day(as.Date(train$Date,"%y/%m/%d"))
train$week = week(as.Date(train$Date,"%y/%m/%d"))
train$month = month(as.Date(train$Date,"%y/%m/%d"))
train$year = year(as.Date(train$Date,"%y/%m/%d"))
head(train)
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
str(train) #1017209
str(store) ##1115
str(test) #41088
summary(train)
summary(test)
train<- merge(store, train, by="Store")
test<- merge(store, test, by="Store")
#Lets explore the sales data for a quick seconds
hist(train$Sales, 100)
#Interesting. Shockingly, it seemst that stores which are not open cannot make sales.
#Since predicting the sales figures of non-open stores seems simple, we should only consider cases
#store are open
train.opensample<- subset(train, Open >0)
hist(train.opensample$Sales, 100)
#Add Year, Month, Week and Day to trainingset
train = as.data.table(train)
train$day = day(as.Date(train$Date,"%y/%m/%d"))
train$week = week(as.Date(train$Date,"%y/%m/%d"))
train$month = month(as.Date(train$Date,"%y/%m/%d"))
train$year = year(as.Date(train$Date,"%y/%m/%d"))
head(train)
library(caret)
library(data.table)
library(forecast)
library(ggplot2)
library(zoo)
require(dplyr)
library(randomForest)
setwd("/Users/bikash/repos/kaggleCompetition1/RossmannStoreSales")
# Set seed
set.seed(123)
## data load
train <- read.table("data/train.csv",sep=',',header = T)
test <- read.table("data/test.csv",sep=',',header = T)
store <- read.table("data/store.csv",sep=',',header = T)
str(train) #1017209
str(store) ##1115
str(test) #41088
# check is.na
sum(is.na(subtrain))  # 0
sum(is.na(train))     # 0
sum(is.na(stores))                           # 1799
sum(is.na(stores$CompetitionDistance))        #   3
sum(is.na(stores$CompetitionOpenSinceYear))   # 354
sum(is.na(stores$CompetitionOpenSinceMonth))  # 354
sum(is.na(stores$Promo2SinceYear))            # 544
sum(is.na(stores$Promo2SinceWeek))            # 544
sum(is.na(train))     # 0
sum(is.na(store))                           # 1799
sum(is.na(store$CompetitionDistance))        #   3
sum(is.na(store$CompetitionOpenSinceYear))   # 354
sum(is.na(store$CompetitionOpenSinceMonth))  # 354
sum(is.na(store$Promo2SinceYear))            # 544
sum(is.na(store$Promo2SinceWeek))            # 544
train$Date <- ymd(train$Date)
test$Date <- ymd(test$Date)
train$day <- as.factor(day(train$Date))
test$day <- as.factor(day(test$Date))
train$month <- as.factor(month(train$Date))
test$month <- as.factor(month(test$Date))
train$year <- as.factor(year(train$Date))
test$year <- as.factor(year(test$Date))
head(train)
head(test)
days_open = train[,list(count = sum(Open)), by = list(Store)]
days_open = train[,list(count = sum(train$Open)), by = list(train$Store)]
list(count = sum(train$Open)), by = list(train$Store)
list(count = sum(train$Open), by = list(train$Store))
list(count = sum(train$Open))
days_open = train[,list(count = sum(train$Open), by = list(train$Store))]
list(count = sum(train$Open), by = list(train$Store))
list(count = sum(train$Open))
days_open = train[,(list(count = sum(train$Open)), by = list(train$Store))]
specific_store = train[Store == 85]
head(train)
train$Store == 85
train <- merge(train,store)
test <- merge(test,store)
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
head(train)
head(test)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
panel.lmline()
#The following code does NOT result in a plot appearing on the screen device.
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(123)
## data load
data <- read.table("household_power_consumption.txt",sep=',',header = T)
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", colClasses=c("character", "character", rep("numeric",7)), na="?")
data
setwd("/Users/bikash/repos/Coursera-Practical-Machine-Learning/ExploratorydataScience/project1")
# Set seed
set.seed(123)
## data load
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", colClasses=c("character", "character", rep("numeric",7)), na="?")
head(data)
str(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
head(daya)
head(data)
data_sub <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
str(data_sub)
data$Datetime <- as.POSIXct(paste(as.Date(data_sub$Date), data_sub$Time))
date <- paste(as.Date(data_sub$Date), data_sub$Time)
data$Datetime <- as.POSIXct(date)
date <- paste(as.Date(data_sub$Date), data_sub$Time)
data_sub$Datetime <- as.POSIXct(date)
head(data_sub)
hist(data_sub$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
plot(data_sub$Datetime,data_sub$Global_active_power, main="Global Active Power",lab="Global Active Power (kilowatts)", ylab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, main="Global Active Power",xlab="Global Active Power (kilowatts)", ylab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, main="Global Active Power", ylab="Global Active Power (kilowatts)", xlab="date", type"1")
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="Global Active Power", ylab="Global Active Power (kilowatts)", xlab="date")
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
head(data_sub
)
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
line(data_sub$Datetime,data_sub$Sub_metering_1,type="l")
plot(NULL, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
lines(data_sub$Sub_metering_1, type="o", pch=22, lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
lines(data_sub$Sub_metering_2, type="o", pch=22, lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=2, col="red")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
plot(NULL, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3, type="o",  lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="o",  lty=2, col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="o",  lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", lty=2, col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", lty=4, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
##plot3
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
head(data)
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
plot4 <- paste(getwd(), "/plots/plot4.png", sep = "")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
plot4 <- paste(getwd(), "/plots/plot4.png", sep = "")
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
##plot 1
png("plots/plot1.png", width = 480, height = 480)
hist(data_sub$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
##plot2
png("plots/plot2.png", width = 480, height = 480)
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
dev.off()
##plot3
png("plots/plot3.png", width = 480, height = 480)
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
## plot4
png("plots/plot4.png", width = 480, height = 480)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(data_sub$Global_active_power~data_sub$Datetime, type="l", main="", ylab="Global Active Power (kilowatts)", xlab="")
plot(data_sub$Voltage~data_sub$Datetime, type="l", main="", ylab="Voltage", xlab="datatime")
plot(data_sub$Sub_metering_1~data_sub$Datetime, type="l", main="", ylab="Energy sub metering", xlab="")
lines(data_sub$Sub_metering_2~data_sub$Datetime, type="l", col="red")
lines(data_sub$Sub_metering_3~data_sub$Datetime, type="l", col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data_sub$Global_reactive_power~data_sub$Datetime, type="l", main="", ylab="Global_reactive_power", xlab="datatime")
dev.off()
install.packages("tidyr")
library(doParallel)
library(dplyr)
library(readr)
library(xgboost)
setwd("/Users/bikash/repos/kaggleCompetition1/homesite-quote-conversion")
#seed
set.seed(1718)
cat("reading the train and test data\n")
train <- read_csv("input/train.csv")
test  <- read_csv("input/test.csv")
# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
head(train)
cat("train data column names and details\n")
names(train)
str(train)
summary(train)
cat("test data column names and details\n")
names(test)
str(test)
summary(test)
# seperating out the elements of the date column for the train set
train$month <- as.integer(format(train$Original_Quote_Date, "%m"))
train$year <- as.integer(format(train$Original_Quote_Date, "%y"))
train$day <- weekdays(as.Date(train$Original_Quote_Date))
# removing the date column
train <- train[,-c(2)]
# seperating out the elements of the date column for the train set
test$month <- as.integer(format(test$Original_Quote_Date, "%m"))
test$year <- as.integer(format(test$Original_Quote_Date, "%y"))
test$day <- weekdays(as.Date(test$Original_Quote_Date))
# removing the date column
test <- test[,-c(2)]
feature.names <- names(train)[c(3:301)]
cat("Feature Names\n")
feature.names
head(train)
head(train[,-c('PropertyField6', 'GeographicField10A')])
head(train$PropertyField6)
head(train$PropertyField6)
head(train)
##remove some feature
train$PropertyField6 <- NULL
train$GeographicField10A <- NULL
test$PropertyField6 <- NULL
test$GeographicField10A <- NULL
feature.names <- names(train)[c(3:301)]
cat("Feature Names\n")
feature.names
cat("assuming text variables are categorical & replacing them with numeric ids\n")
for (f in feature.names) {
if (class(train[[f]])=="character") {
levels <- unique(c(train[[f]], test[[f]]))
train[[f]] <- as.integer(factor(train[[f]], levels=levels))
test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
}
}
cat("train data column names after slight feature engineering\n")
names(train)
cat("test data column names after slight feature engineering\n")
names(test)
tra<-train[,feature.names]
nrow(train)
h<-sample(nrow(train),2000)
dval<-xgb.DMatrix(data=data.matrix(tra[h,]),label=train$QuoteConversion_Flag[h])
#dtrain<-xgb.DMatrix(data=data.matrix(tra[-h,]),label=train$QuoteConversion_Flag[-h])
dtrain<-xgb.DMatrix(data=data.matrix(tra),label=train$QuoteConversion_Flag)
watchlist<-list(val=dval,train=dtrain)
param <- list(  objective           = "binary:logistic",
booster = "gbtree",
eval_metric = "auc",
eta                 = 0.023, # 0.06, #0.01,
max_depth           = 6, #changed from default of 8
subsample           = 0.83, # 0.7
colsample_bytree    = 0.77 # 0.7
#num_parallel_tree   = 2
# alpha = 0.0001,
# lambda = 1
)
head(train$QuoteConversion_Flag)
feature.names <- names(train)[c(3:301)]
cat("Feature Names\n")
feature.names
cat("assuming text variables are categorical & replacing them with numeric ids\n")
for (f in feature.names) {
if (class(train[[f]])=="character") {
levels <- unique(c(train[[f]], test[[f]]))
train[[f]] <- as.integer(factor(train[[f]], levels=levels))
test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
}
}
feature.names <- names(train)[c(3:297)]
cat("Feature Names\n")
feature.names
cat("assuming text variables are categorical & replacing them with numeric ids\n")
for (f in feature.names) {
if (class(train[[f]])=="character") {
levels <- unique(c(train[[f]], test[[f]]))
train[[f]] <- as.integer(factor(train[[f]], levels=levels))
test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
}
}
feature.names <- names(train)[c(3:299)]
cat("Feature Names\n")
feature.names
cat("assuming text variables are categorical & replacing them with numeric ids\n")
for (f in feature.names) {
if (class(train[[f]])=="character") {
levels <- unique(c(train[[f]], test[[f]]))
train[[f]] <- as.integer(factor(train[[f]], levels=levels))
test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
}
}
cat("train data column names after slight feature engineering\n")
names(train)
cat("test data column names after slight feature engineering\n")
names(test)
tra<-train[,feature.names]
nrow(train)
h<-sample(nrow(train),2000)
dval<-xgb.DMatrix(data=data.matrix(tra[h,]),label=train$QuoteConversion_Flag[h])
#dtrain<-xgb.DMatrix(data=data.matrix(tra[-h,]),label=train$QuoteConversion_Flag[-h])
dtrain<-xgb.DMatrix(data=data.matrix(tra),label=train$QuoteConversion_Flag)
watchlist<-list(val=dval,train=dtrain)
param <- list(  objective           = "binary:logistic",
booster = "gbtree",
eval_metric = "auc",
eta                 = 0.023, # 0.06, #0.01,
max_depth           = 6, #changed from default of 8
subsample           = 0.83, # 0.7
colsample_bytree    = 0.77 # 0.7
#num_parallel_tree   = 2
# alpha = 0.0001,
# lambda = 1
)
clf <- xgb.train(   params              = param,
data                = dtrain,
nrounds             = 1800,
verbose             = 1,  #1
#early.stop.round    = 150,
#watchlist           = watchlist,
maximize            = FALSE
)
pred1 <- predict(clf, data.matrix(test[,feature.names]))
submission <- data.frame(QuoteNumber=test$QuoteNumber, QuoteConversion_Flag=pred1)
cat("saving the submission file\n")
write_csv(submission, "output/xgb.csv")
